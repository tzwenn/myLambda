stmt ::= expr.
func ::= # [name (\ name)*] : expr
bind ::= name = expr
expr ::= name | func | call | value | bind
call ::= cex\([expr(\ expr)*]\)
cex  ::= name | \(expr\) | operator | call

values are numbers only atm

() und Space are escapeable

Base types: bool, number

builtin functions for:
    bool: & | ^
    number: + - * / ** %

number -> bool: == < > <= >= !=
if(cond, s1, s2)


Tokens:
    BaseTokens:
        )
        (
        #
        .
        =

    Identifier:
        name

    Operator:
        &
        |
        ^
        +
        -
        *
        /
        **
        %
        <
        <=
        ==
        >=
        >
        !=

    Values:
        1
        2
        3...

        later chars too
